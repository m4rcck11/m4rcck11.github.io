---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "MARKDEV" } = Astro.props;
---

<!DOCTYPE html>
<html lang="pt-BR" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- SEO Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Vanta.js Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js" is:inline></script>
    <script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.dots.min.js" is:inline></script>
  </head>
  <body class="bg-custom-dark text-gray-900 transition-colors duration-300">
    <slot />
    
    <!-- Scripts para funcionalidades interativas -->
    <script>
      // Intersection Observer para animações
      const observeElements = () => {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-fade-in');
              observer.unobserve(entry.target);
            }
          });
        }, {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        });
        
        document.querySelectorAll('.animate-on-scroll').forEach((el) => {
          observer.observe(el);
        });
      };
      
      // Navbar scroll effect (background sempre transparente)
      const handleNavbarScroll = () => {
        const navbar = document.getElementById('navbar');
        if (navbar) {
          // Removidos todos os efeitos visuais para manter transparência total
          // navbar.classList.toggle('backdrop-blur-md', scrolled);
          // navbar.classList.toggle('shadow-lg', scrolled);
          // Background sempre transparente - removidos todos os efeitos
        }
      };
      
      // Typing effect
      const createTypingEffect = (element: HTMLElement, text: string, speed: number = 100) => {
        let i = 0;
        element.textContent = '';
        
        const typeWriter = () => {
          if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
            setTimeout(typeWriter, speed);
          }
        };
        
        typeWriter();
      };
      
      // Initialize everything when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        observeElements();
        
        // Navbar scroll effect
        window.addEventListener('scroll', handleNavbarScroll);
        
        // Typing effect for hero section
        const heroTitle = document.getElementById('hero-title');
        if (heroTitle) {
          setTimeout(() => {
            createTypingEffect(heroTitle, 'MARKDEV', 80);
          }, 1000);
        }
        
        // Initialize Vanta.js background
        setTimeout(() => {
          if (window.VANTA) {
            window.VANTA.DOTS({
              el: "#vanta-hero-bg",
              mouseControls: true,
              touchControls: true,
              gyroControls: false,
              minHeight: 200.00,
              minWidth: 200.00,
              scale: 1.00,
              scaleMobile: 1.00,
              color: 0xffffff,
              color2: 0x808080,
              backgroundColor: 0x242323,
              spacing: 15.00,
              size: 1.5
            });
          }
        }, 500);
      });
      
      // Mobile menu toggle
      const setupMobileMenu = () => {
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuBtn && mobileMenu) {
          mobileMenuBtn.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
          });
        }
      };
      
      // Setup mobile menu after DOM is loaded
      document.addEventListener('DOMContentLoaded', setupMobileMenu);
    </script>
  </body>
</html>

<style>
  html {
    font-family: 'Inter', system-ui, sans-serif;
  }
  
  body {
    line-height: 1.6;
  }
  
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
  
  .animate-fade-in {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }
</style> 