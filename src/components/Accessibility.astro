---
// Accessibility component for WCAG compliance
---

<!-- Skip to main content link for screen readers -->
<a href="#main-content" class="skip-link">
  Pular para o conteúdo principal
</a>

<!-- High contrast mode toggle -->
<button 
  id="high-contrast-toggle" 
  class="accessibility-toggle"
  aria-label="Alternar modo de alto contraste"
  title="Alternar modo de alto contraste">
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
  </svg>
</button>

<!-- Font size controls -->
<div class="font-size-controls" role="group" aria-label="Controles de tamanho de fonte">
  <button 
    id="decrease-font" 
    class="accessibility-toggle"
    aria-label="Diminuir tamanho da fonte"
    title="Diminuir tamanho da fonte">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
    </svg>
  </button>
  <button 
    id="increase-font" 
    class="accessibility-toggle"
    aria-label="Aumentar tamanho da fonte"
    title="Aumentar tamanho da fonte">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
    </svg>
  </button>
</div>

<!-- Reduced motion toggle -->
<button 
  id="reduced-motion-toggle" 
  class="accessibility-toggle"
  aria-label="Alternar animações reduzidas"
  title="Alternar animações reduzidas">
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
  </svg>
</button>

<style>
  /* Skip link - hidden by default, visible on focus */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: #000;
    color: #fff;
    padding: 8px;
    text-decoration: none;
    border-radius: 4px;
    z-index: 10000;
    transition: top 0.3s;
  }

  .skip-link:focus {
    top: 6px;
  }

  /* Accessibility controls container */
  .accessibility-toggle {
    @apply fixed top-4 right-4 z-50 p-2 bg-white bg-opacity-90 backdrop-blur-sm rounded-full shadow-lg hover:bg-opacity-100 transition-all duration-200 border border-gray-200;
    margin-bottom: 8px;
  }

  .accessibility-toggle:hover {
    @apply transform scale-105;
  }

  .accessibility-toggle:focus {
    @apply outline-none ring-2 ring-blue-500 ring-offset-2;
  }

  /* Font size controls positioning */
  .font-size-controls {
    @apply fixed top-16 right-4 z-50 flex flex-col gap-2;
  }

  .font-size-controls .accessibility-toggle {
    @apply relative top-0 right-0;
    margin-bottom: 0;
  }

  /* High contrast mode styles */
  .high-contrast {
    filter: contrast(150%) brightness(110%);
  }

  .high-contrast * {
    border-color: #000 !important;
  }

  .high-contrast .text-white {
    color: #000 !important;
  }

  .high-contrast .bg-black {
    background-color: #fff !important;
  }

  /* Reduced motion styles */
  .reduced-motion *,
  .reduced-motion *::before,
  .reduced-motion *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  /* Focus indicators */
  *:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* High contrast focus */
  .high-contrast *:focus {
    outline: 3px solid #000;
    outline-offset: 3px;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .accessibility-toggle {
      @apply top-2 right-2 p-1.5;
    }
    
    .font-size-controls {
      @apply top-12 right-2;
    }
  }
</style>

<script>
  // Accessibility functionality
  document.addEventListener('DOMContentLoaded', function() {
    // High contrast toggle
    const highContrastToggle = document.getElementById('high-contrast-toggle');
    if (highContrastToggle) {
      highContrastToggle.addEventListener('click', function() {
        document.body.classList.toggle('high-contrast');
        const isActive = document.body.classList.contains('high-contrast');
        localStorage.setItem('high-contrast', isActive.toString());
        
        // Update aria-pressed
        this.setAttribute('aria-pressed', isActive.toString());
      });
      
      // Restore state from localStorage
      const savedHighContrast = localStorage.getItem('high-contrast') === 'true';
      if (savedHighContrast) {
        document.body.classList.add('high-contrast');
        highContrastToggle.setAttribute('aria-pressed', 'true');
      }
    }

    // Font size controls
    const decreaseFont = document.getElementById('decrease-font');
    const increaseFont = document.getElementById('increase-font');
    
    function changeFontSize(direction: 'increase' | 'decrease') {
      const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
      const newSize = direction === 'increase' ? currentSize + 2 : currentSize - 2;
      
      // Limit font size between 12px and 24px
      const clampedSize = Math.max(12, Math.min(24, newSize));
      document.documentElement.style.fontSize = clampedSize + 'px';
      
      localStorage.setItem('font-size', clampedSize.toString());
    }
    
    if (decreaseFont) {
      decreaseFont.addEventListener('click', () => changeFontSize('decrease'));
    }
    
    if (increaseFont) {
      increaseFont.addEventListener('click', () => changeFontSize('increase'));
    }
    
    // Restore font size from localStorage
    const savedFontSize = localStorage.getItem('font-size');
    if (savedFontSize) {
      document.documentElement.style.fontSize = savedFontSize + 'px';
    }

    // Reduced motion toggle
    const reducedMotionToggle = document.getElementById('reduced-motion-toggle');
    if (reducedMotionToggle) {
      reducedMotionToggle.addEventListener('click', function() {
        document.body.classList.toggle('reduced-motion');
        const isActive = document.body.classList.contains('reduced-motion');
        localStorage.setItem('reduced-motion', isActive.toString());
        
        // Update aria-pressed
        this.setAttribute('aria-pressed', isActive.toString());
      });
      
      // Restore state from localStorage
      const savedReducedMotion = localStorage.getItem('reduced-motion') === 'true';
      if (savedReducedMotion) {
        document.body.classList.add('reduced-motion');
        reducedMotionToggle.setAttribute('aria-pressed', 'true');
      }
    }

    // Check for user's motion preference
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      document.body.classList.add('reduced-motion');
      if (reducedMotionToggle) {
        reducedMotionToggle.setAttribute('aria-pressed', 'true');
      }
    }

    // Keyboard navigation improvements
    document.addEventListener('keydown', function(e) {
      // Escape key to close modals or return to top
      if (e.key === 'Escape') {
        const modals = document.querySelectorAll('[role="dialog"]');
        modals.forEach(modal => {
          const modalElement = modal as HTMLElement;
          if (modalElement.style.display !== 'none') {
            modalElement.style.display = 'none';
          }
        });
        
        // Return focus to top of page
        (document.body as HTMLElement).focus();
      }
      
      // Ctrl/Cmd + K to focus search (if exists)
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        const searchInput = document.querySelector('input[type="search"], input[placeholder*="buscar"], input[placeholder*="search"]') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }
    });

    // Announce dynamic content changes to screen readers
    function announceToScreenReader(message: string) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }

    // Make announcement function globally available
    (window as any).announceToScreenReader = announceToScreenReader;
  });
</script> 