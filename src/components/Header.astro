---
// Header component
---

<header id="navbar" class="absolute top-0 left-0 right-0 z-50 transition-all duration-300">
  <nav class="container-custom">
    <div class="flex items-center justify-between py-4">
      <!-- Logo -->
      <a href="#home" class="logo-container flex items-center space-x-3 transition-transform duration-300 -ml-6">
        <img src="/logo.svg" alt="MARKDEV Logo" class="h-36 w-auto">
        <!-- <span class="text-2xl font-bold font-tech text-gradient hidden sm:block">MARKDEV</span> -->
      </a>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        <a href="#about-markdev" class="nav-link" data-text="Why Us?" data-i18n="whyUs">
          <span class="glitch-layer" data-i18n="whyUs">Why Us?</span>
          <span class="glitch-layer" data-i18n="whyUs">Why Us?</span>
          <span data-i18n="whyUs">Why Us?</span>
        </a>
        <a href="#services" class="nav-link" data-text="Services" data-i18n="services">
          <span class="glitch-layer" data-i18n="services">Services</span>
          <span class="glitch-layer" data-i18n="services">Services</span>
          <span data-i18n="services">Services</span>
        </a>
        <button id="partners-btn" class="nav-link" data-text="Our Partners" data-i18n="ourPartners">
          <span class="glitch-layer" data-i18n="ourPartners">Our Partners</span>
          <span class="glitch-layer" data-i18n="ourPartners">Our Partners</span>
          <span data-i18n="ourPartners">Our Partners</span>
        </button>
        <a href="#about-me" class="nav-link" data-text="About Me" data-i18n="aboutMe">
          <span class="glitch-layer" data-i18n="aboutMe">About Me</span>
          <span class="glitch-layer" data-i18n="aboutMe">About Me</span>
          <span data-i18n="aboutMe">About Me</span>
        </a>
        
        <!-- Language Toggle -->
        <button id="lang-toggle" class="nav-link language-toggle" title="Toggle Language">
          <span class="flag-icon">ðŸ‡ºðŸ‡¸</span>
        </button>
      </div>
      
      <!-- Mobile Menu Button -->
      <button id="mobile-menu-btn" class="md:hidden p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden pb-4">
      <div class="flex flex-col space-y-4">
        <a href="#about-markdev" class="nav-link" data-text="Why Us?" data-i18n="whyUs">
          <span class="glitch-layer" data-i18n="whyUs">Why Us?</span>
          <span class="glitch-layer" data-i18n="whyUs">Why Us?</span>
          <span data-i18n="whyUs">Why Us?</span>
        </a>
        <a href="#services" class="nav-link" data-text="Services" data-i18n="services">
          <span class="glitch-layer" data-i18n="services">Services</span>
          <span class="glitch-layer" data-i18n="services">Services</span>
          <span data-i18n="services">Services</span>
        </a>
        <button id="partners-btn-mobile" class="nav-link" data-text="Our Partners" data-i18n="ourPartners">
          <span class="glitch-layer" data-i18n="ourPartners">Our Partners</span>
          <span class="glitch-layer" data-i18n="ourPartners">Our Partners</span>
          <span data-i18n="ourPartners">Our Partners</span>
        </button>
        <a href="#about-me" class="nav-link" data-text="About Me" data-i18n="aboutMe">
          <span class="glitch-layer" data-i18n="aboutMe">About Me</span>
          <span class="glitch-layer" data-i18n="aboutMe">About Me</span>
          <span data-i18n="aboutMe">About Me</span>
        </a>
        
        <!-- Mobile Language Toggle -->
        <button id="lang-toggle-mobile" class="nav-link language-toggle" title="Toggle Language">
          <span class="flag-icon">ðŸ‡ºðŸ‡¸</span>
        </button>
      </div>
    </div>
  </nav>
</header>

<style>
  /* Header sempre transparente */
  #navbar {
    background: transparent !important;
    backdrop-filter: none !important;
    -webkit-backdrop-filter: none !important;
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.4s ease, transform 0.4s ease;
  }
  
  .nav-link {
    @apply text-gray-300 font-medium relative overflow-hidden;
    transition: color 0.3s ease;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  
  /* Linhas glitch que aparecem no hover */
  .nav-link::before {
    content: " ";
    display: block;
    opacity: 0;
    width: 20px;
    height: 1px;
    background: #fff;
    border-bottom: 1px solid #000;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 30;
    margin-left: -30px;
    margin-top: 8px;
  }
  
  .nav-link::after {
    content: " ";
    display: block;
    opacity: 0;
    width: 35px;
    height: 1px;
    background: #fff;
    border-bottom: 1px solid #000;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 30;
    margin-left: 25px;
    margin-top: -5px;
  }
  
  /* Camadas de texto glitch */
  .nav-link .glitch-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
  }
  
  .nav-link .glitch-layer:nth-child(1) {
    color: #00ffff;
  }
  
  .nav-link .glitch-layer:nth-child(2) {
    color: #ff0000;
  }
  
  /* Efeitos no hover */
  .nav-link:hover {
    cursor: pointer;
    color: #efefef;
  }
  
  .nav-link:hover::before,
  .nav-link:hover::after {
    animation: lines 0.25s infinite;
  }
  
  .nav-link:hover .glitch-layer:nth-child(1) {
    animation: reverse-position 0.25s infinite;
  }
  
  .nav-link:hover .glitch-layer:nth-child(2) {
    animation: forward-position 0.25s infinite;
  }
  
  /* AnimaÃ§Ãµes */
  @keyframes reverse-position {
    0% { 
      left: 0; 
      top: 0; 
    }
    50% { 
      left: -3px; 
      top: -3px; 
    }
    100% { 
      left: 0; 
      top: 0; 
    }
  }
  
  @keyframes forward-position {
    0% { 
      left: 0; 
      top: 0; 
    }
    50% { 
      left: 3px; 
      top: 3px; 
    }
    100% { 
      left: 0; 
      top: 0; 
    }
  }
  
  @keyframes lines {
    0% { 
      opacity: 0.8; 
    }
    30% { 
      opacity: 0; 
    }
    50% { 
      opacity: 0.4; 
    }
    80% { 
      opacity: 0; 
    }
    100% { 
      opacity: 0.8; 
    }
  }

  .logo-container {
    position: relative;
  }

  .logo-container:hover::before,
  .logo-container:hover::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('/logo.svg') no-repeat center;
    background-size: contain;
    pointer-events: none;
  }

  .logo-container:hover::before {
    filter: drop-shadow(2px 0 var(--cyber-cyan));
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
    animation: glitch-top 2s infinite linear alternate-reverse;
  }

  .logo-container:hover::after {
    filter: drop-shadow(-2px 0 var(--cyber-magenta));
    clip-path: polygon(0 55%, 100% 55%, 100% 100%, 0 100%);
    animation: glitch-bottom 3s infinite linear alternate-reverse;
  }

  @keyframes glitch-top {
    0% { transform: translateX(0); }
    100% { transform: translateX(2px); }
  }

  @keyframes glitch-bottom {
    0% { transform: translateX(0); }
    100% { transform: translateX(-2px); }
  }

  :root {
    --cyber-cyan: #00ffff;
    --cyber-magenta: #ff00ff;
  }
  
  /* Language toggle styles */
  .language-toggle {
    @apply relative cursor-pointer transition-transform duration-300 hover:scale-110;
    min-width: 40px;
  }
  
  .flag-icon {
    font-size: 1.2rem;
    display: inline-block;
    transition: transform 0.3s ease;
  }
  
  .language-toggle:hover .flag-icon {
    transform: scale(1.1);
  }
</style>

<script>
  // Import i18n functions
  import { detectLanguage, saveLanguage, t, getTranslations } from '../i18n/index.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize language
    let currentLanguage = detectLanguage();
    
    // Update UI with current language
    function updateLanguage(lang) {
      currentLanguage = lang;
      saveLanguage(lang);
      
      // Update flag icons
      const flagIcons = document.querySelectorAll('.flag-icon');
      flagIcons.forEach(icon => {
        icon.textContent = lang === 'pt' ? 'ðŸ‡§ðŸ‡·' : 'ðŸ‡ºðŸ‡¸';
      });
      
      // Update all translatable elements
      const elements = document.querySelectorAll('[data-i18n]');
      elements.forEach(el => {
        const key = el.getAttribute('data-i18n');
        const translation = t(key, lang);
        
        // Update data-text attribute for glitch effect
        if (el.hasAttribute('data-text')) {
          el.setAttribute('data-text', translation);
        }
        
        el.textContent = translation;
      });
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('languageChanged', { 
        detail: { language: lang, translations: getTranslations(lang) } 
      }));
    }
    
    // Set initial language
    updateLanguage(currentLanguage);
    
    // Language toggle functionality
    const langToggle = document.getElementById('lang-toggle');
    const langToggleMobile = document.getElementById('lang-toggle-mobile');
    
    function toggleLanguage() {
      const newLang = currentLanguage === 'en' ? 'pt' : 'en';
      updateLanguage(newLang);
    }
    
    langToggle?.addEventListener('click', toggleLanguage);
    langToggleMobile?.addEventListener('click', toggleLanguage);
    
    // Mobile menu toggle
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }
    
    // Close mobile menu when clicking on a link
    const mobileNavLinks = mobileMenu?.querySelectorAll('.nav-link');
    mobileNavLinks?.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
      });
    });
  });
</script> 